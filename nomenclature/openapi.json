{
	"openapi": "3.1.0",
	"info": {
		"title": "Nomenclature API",
		"version": "1.0.0",
		"description": "Nomenclature for Museum Cataloging API working documentation",
		"termsOfService": "https://page.nomenclature.info/droitauteur-copyright.app?lang=en",
		"contact": {
			"name": "Canadian Heritage Information Network (CHIN)",
			"url": "https://www.canada.ca/en/heritage-information-network/corporate/contact.html",
			"email": "pch.RCIP-CHIN.pch@pch.gc.ca"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "https://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"servers": [
		{
			"url": "https://nomenclature.info/api/v1",
			"description": "Nomenclature API server"
		}
	],
	"paths": {
		"/concepts": {
			"get": {
				"summary": "Get all concepts",
				"description": "Returns all concept resources, sorted by descending modified date.",
				"operationId": "getAllConcepts",
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","en-CA","fr","fr-CA","es","iu","iu-Latn"]
						}
					},
					{
						"name": "deprecated",
						"in": "query",
						"description": "Deprecating status that need to be considered for filter. If not specified, response includes both active and deprecated concepts.",
						"required": false,
						"schema": {
							"type": "boolean",
							"enum": ["true","false"]
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items to return at one time (max 500)",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"maximum": 500,
							"default": 100
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The first number of items to be excluded from a response",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Concepts"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Concepts"
								}
							}
						}
					}
				}
			}
		},
		"/concepts/{conceptId}": {
			"get": {
				"summary": "Get a concept by ID",
				"description": "Returns a concept resource based on concept ID",
				"operationId": "getConceptById",
				"parameters": [
					{
						"name": "conceptId",
						"in": "path",
						"description": "Identifier of a concept",
						"required": true,
						"schema": {
							"type": "string",
							"example": "1090"
						}
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","en-CA","fr","fr-CA","es","iu","iu-Latn"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Concepts"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Concepts"
								}
							}
						}
					}
				}
			}
		},
		"/concepts/{conceptId}/labels": {
			"get": {
				"summary": "Get all labels of a concept",
				"description": "Returns all label resources of a concept based on concept ID",
				"operationId": "getLabelsByConceptId",
				"parameters": [
					{
						"name": "conceptId",
						"in": "path",
						"description": "Identifier of a concept",
						"required": true,
						"schema": {
							"type": "string",
							"example": "1090"
						}
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","en-CA","fr","fr-CA","es","iu","iu-Latn"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Labels"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Labels"
								}
							}
						}
					}
				}
			}
		},
		"/concepts/{conceptId}/siblings": {
			"get": {
				"summary": "Get all siblings of a concept",
				"description": "Returns all sibling resources of a concept based on concept ID",
				"operationId": "getSiblingsByConceptId",
				"parameters": [
					{
						"name": "conceptId",
						"in": "path",
						"description": "Identifier of a concept",
						"required": true,
						"schema": {
							"type": "string",
							"example": "1090"
						}
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","en-CA","fr","fr-CA","es","iu","iu-Latn"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Concepts"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Concepts"
								}
							}
						}
					}
				}
			}
		},
		"/contributors": {
			"get": {
				"summary": "Get all term contributors",
				"description": "Returns all term contributor resources, sorted by ascending identifiers.",
				"operationId": "getAllContributors",
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","fr"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Contributors"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Contributors"
								}
							}
						}
					}
				}
			}
		},
		"/contributors/{agentId}": {
			"get": {
				"summary": "Get a term contributor by ID",
				"description": "Returns a term contributor resource based on agent ID",
				"operationId": "getContributorById",
				"parameters": [
					{
						"name": "agentId",
						"in": "path",
						"description": "Identifier of an agent (term contributor)",
						"required": true,
						"schema": {
							"type": "string",
							"example": "2"
						}
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","fr"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Contributors"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Contributors"
								}
							}
						}
					}
				}
			}
		},
		"/citations": {
			"get": {
				"summary": "Get all bibliographic citations",
				"description": "Returns all bibliographic resources, sorted by alphabetical order of bibliographic citation's literal value.",
				"operationId": "getAllCitations",
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","fr"]
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items to return at one time (max 500)",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"maximum": 500,
							"default": 100
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The first number of items to be excluded from a response",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Citations"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Citations"
								}
							}
						}
					}
				}
			}
		},
		"/citations/{bibId}": {
			"get": {
				"summary": "Get a bibliographic citation by ID",
				"description": "Returns a bibliographic resource based on its ID",
				"operationId": "getCitationById",
				"parameters": [
					{
						"name": "bibId",
						"in": "path",
						"description": "Zotero identifier of a bibliographic resource",
						"required": true,
						"schema": {
							"type": "string",
							"example": "H2E7VWRI"
						}
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","fr"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Citations"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Citations"
								}
							}
						}
					}
				}
			}
		},
		"/revisions": {
			"get": {
				"summary": "Get all change notes",
				"description": "Returns all change notes resources, sorted by descending created date of change note.",
				"operationId": "getAllRevisions",
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {"type": "string", "enum": ["en","fr"]}
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "Earliest date from which changes were made",
						"required": false,
						"schema": {"type": "string","format": "date","example":"2023-10-01"}
					},
					{
						"name": "endDate",
						"in": "query",
						"description": "Latest date to which changes were made",
						"required": false,
						"schema": {"type": "string","format": "date","example":"2023-12-31"}
					},
					{
						"name": "nomId",
						"in": "query",
						"description": "Identifier of a concept",
						"required": false,
						"schema": {"type": "string","example":"1090"}
					},
					{
						"name": "changeType",
						"in": "query",
						"description": "Type of changes",
						"required": false,
						"schema": {"type": "string", "enum": ["create","remove","update","move"]}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items to return at one time (max 500)",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"maximum": 500,
							"default": 100
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The first number of items to be excluded from a response",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Revisions"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Revisions"
								}
							}
						}
					}
				}
			}
		},
		"/revisions/{changeNoteId}": {
			"get": {
				"summary": "Get a change note by ID",
				"description": "Returns a change note resource based on its ID",
				"operationId": "getRevisionById",
				"parameters": [
					{
						"name": "changeNoteId",
						"in": "path",
						"description": "Identifier of a change note (revision)",
						"required": true,
						"schema": {
							"type": "string",
							"example": "995592fe-017d-4929-a1fd-48f5e5e033f8"
						}
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","fr"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Revisions"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Revisions"
								}
							}
						}
					}
				}
			}
		},
		"/search": {
			"get": {
				"summary": "Search concepts by keyword",
				"description": "Returns minimized concept resources when searching for a keyword across either all labels or all text fields (i.e. all labels, scope notes and definitions), sorted by descending Lucene index score.",
				"operationId": "searchByKeyword",
				"parameters": [
					{
						"name": "termSearch",
						"in": "query",
						"description": "Search keyword",
						"required": true,
						"schema": {
							"type": "string",
							"example": "chair"
						}
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","en-CA","fr","fr-CA","es","iu","iu-Latn"]
						}
					},
					{
						"name": "scope",
						"in": "query",
						"description": "Scope of a search, either all labels or all text fields (i.e. all labels, scope notes and definitions)",
						"required": false,
						"schema": {
							"type": "string",
							"default": "allLabels",
							"enum": ["allLabels","allText"]
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items to return at one time (max 500)",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"maximum": 500,
							"default": 100
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The first number of items to be excluded from a response",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Search"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Search"
								}
							}
						}
					}
				}
			}
		},
		"/void": {
			"get": {
				"summary": "Get dataset description",
				"description": "Returns a dataset description resource",
				"operationId": "getDatasetDescription",
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"description": "Language tag(s) that need to be considered for filter. If not specified, response includes literal values in all languages. Response includes values in all variants of specified language, e.g. `lang=en` returns **both** values in `en` and `en-CA`. If the CA variant is targeted but doesn't exist, reponse includes the international form. If the Latn script is targeted but doesn't exist, response includes the native script.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["en","fr"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Void"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Void"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"EndpointRef": {
				"required": ["id","self"],
				"type": "object",
				"properties": {
					"id": {"type": "string", "description": "Identifier of resource"},
					"self": {"type": "string", "format": "uri", "description": "URL of resource API endpoint"}
				}
			},
			"Literal": {
				"required": ["value","language"],
				"type": "object",
				"properties": {
					"value": {"type": "string", "description": "Literal value"},
					"language": {"type": "string", "description": "Language tag of literal value"}
				}
			},
			"Date": {
				"type": "string",
				"format": "date-time"
			},
			"ResourceTypesArray": {
				"type": "array",
				"items": {"type": "string", "format": "uri", "xml": {"name":"resourceType"}},
				"description": "Classes of resource",
				"xml": {"name":"resourceTypes","wrapped":true}
			},
			"Image": {
				"required": ["contentUrl"],
				"type": "object",
				"properties": {
					"id": {"type": "string", "description": "Identifier of image"},
					"uri": {"type": "string", "format": "uri", "description": "Image URI"},
					"resourceType": {"$ref": "#/components/schemas/ResourceTypesArray"},
					"contentUrl": {"type": "string", "format": "uri", "description": "URL of image hosted by PCH"},
					"name": {
						"type": "array",
						"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}], "xml": {"name":"name"}},
						"description": "Names of image",
						"xml": {"name":"names","wrapped":true}
					},
					"creditText": {
						"type": "array",
						"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"creditText"}},
						"description": "Credit lines of image source",
						"xml": {"name":"creditTexts","wrapped":true}
					},
					"source": {"type": "string", "format": "uri", "description": "URL of the original image"},
					"thumbnailUrl": {"type": "string", "format": "uri", "description": "URL of thumbnail image hosted by PCH"},
					"position": {"type": "integer", "minimum": 1, "maximum": 4, "description": "Display order of image"}
				},
				"xml": {"name":"image"}
			},
			"Level": {
				"required": ["position"],
				"type": "object",
				"properties": {
					"uri": {"type": "string", "format": "uri", "description": "Level URI"},
					"position": {"type": "integer", "minimum": 1, "maximum": 6, "description": "Level number"},
					"prefLabel": {
						"type": "array",
						"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"prefLabel"}},
						"description": "Preferred terms of level",
						"xml": {"name":"prefLabels","wrapped":true}
					}
				}
			},
			"Labels": {
				"allOf": [
					{"$ref": "#/components/schemas/EndpointRef"},
					{
						"type": "object",
						"properties": {
							"uri": {"type": "string", "format": "uri", "description": "Concept URI"},
							"resourceType": {"$ref": "#/components/schemas/ResourceTypesArray"},
							"mainEntityOfPage": {"type": "string", "format": "uri", "description": "URL of concept page on Nomenclature website (active concept only)"},
							"deprecated": {"type": "boolean", "description": "Indicator of deprecation"},
							"label": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
									"xml": {"name": "label"}
								},
								"description": "Labels of concept (deprecated concept only)",
								"xml": {"name": "labels","wrapped": true}
							},
							"prefLabel": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
									"xml": {"name": "prefLabel"}
								},
								"description": "Preferred terms of concept (active concept only)",
								"xml": {"name": "prefLabels","wrapped": true}
							},
							"altLabel": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"literalForm": {"$ref": "#/components/schemas/Literal"}
									},
									"xml": {"name": "altLabel"}
								},
								"description": "Alternative terms of concept (active concept only)",
								"xml": {"name": "altLabels","wrapped": true}
							},
							"hiddenLabel": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
									"xml": {"name": "hiddenLabel"}
								},
								"description": "Hidden terms of concept (active concept only)",
								"xml": {"name": "hiddenLabels","wrapped": true}
							}
						}
					}
				],
				"xml": {"name": "Concept"}
			},
			"Concept": {
				"allOf": [
					{"$ref": "#/components/schemas/EndpointRef"},
					{
						"type": "object",
						"properties": {
							"uri": {"type": "string", "format": "uri", "description": "Concept URI"},
							"inScheme": {"type": "string", "format": "uri", "description": "Concept scheme URI (active concept only)"},
							"resourceType": {"$ref": "#/components/schemas/ResourceTypesArray"},
							"mainEntityOfPage": {"type": "string", "format": "uri", "description": "URL of concept page on Nomenclature website (active concept only)"},
							"created": {"allOf":[{"$ref": "#/components/schemas/Date"}], "description": "Creation date (active concept only)"},
							"modified": {"allOf":[{"$ref": "#/components/schemas/Date"}], "description": "Last modified date"},
							"deprecated": {"type": "boolean", "description": "Indicator of deprecation"},
							"isReplacedBy": {
								"allOf":[{"$ref": "#/components/schemas/EndpointRef"}],
								"description": "Concept replacing deprecated concept (deprecated concept only)"
							},
							"notation": {"type": "string", "description": "Identifier from Parks Canada's Descriptive and Visual Dictionary of Objects (DVDO) (active concept only)"},
							"label": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
									"xml": {"name":"label"}
								},
								"description": "Labels of concept (deprecated concept only)",
								"xml": {"name": "labels","wrapped": true}
							},
							"prefLabel": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"uri": {"type": "string", "format": "uri", "description": "Preferred term URI"},
										"literalForm": {"$ref": "#/components/schemas/Literal"},
										"contributor": {
											"type": "array",
											"items": {"allOf":[{"$ref": "#/components/schemas/EndpointRef"}],"xml": {"name":"contributor"}},
											"description": "Contributors of preferred term",
											"xml": {"name":"contributors","wrapped":true}
										},
										"citation": {
											"type": "array",
											"items": {"allOf":[{"$ref": "#/components/schemas/EndpointRef"}],"xml": {"name":"citation"}},
											"description": "Sources of preferred term",
											"xml": {"name":"citations","wrapped":true}
										},
										"gender": {"type": "string", "enum": ["m","f"], "description": "Gender of French preferred terms"}
									},
									"xml": {"name":"prefLabel"}
								},
								"description": "Preferred terms of concept (active concept only)",
								"xml": {"name":"prefLabels","wrapped":true}
							},
							"altLabel": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"literalForm": {"$ref": "#/components/schemas/Literal"},
										"type": {"type": "string", "enum": ["inverse"], "description": "Indicator of inverted term"}
									},
									"xml": {"name":"altLabel"}
								},
								"description": "Alternative terms of concept (active concept only)",
								"xml": {"name":"altLabels","wrapped":true}
							},
							"hiddenLabel": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
									"xml": {"name":"hiddenLabel"}
								},
								"description": "Hidden terms of concept (active concept only)",
								"xml": {"name":"hiddenLabels","wrapped":true}
							},
							"image": {
								"type": "array", 
								"maxItems": 4,
								"items": {"$ref": "#/components/schemas/Image"},
								"description": "Images of concept (active concept only)",
								"xml": {"name":"images","wrapped":true}
							},
							"isPartOf": {"allOf":[{"$ref": "#/components/schemas/Level"}], "description": "Level of concept in the hierarchy (active concept only)"},
							"position": {
								"type": "array",
								"minItems": 6,
								"maxItems": 6,
								"items": {
									"type": "object",
									"properties": {
										"uri": {"type": "string", "format": "uri", "description": "Sorting order URI"},
										"value": {"type": "string", "description": "Sorting order value"},
										"type": {
											"type": "string", 
											"enum": ["en","enInv","enCa","enCaInv","fr","frCa"],
											"description": "Language tag and term order of preferred term to which the sort is applied"
										}
									},
									"xml": {"name":"position"}
								},
								"description": "Sorting order (active concept only)",
								"xml": {"name":"positions","wrapped":true}
							},
							"topConceptOf": {"type": "string", "format": "uri", "description": "Concept Scheme URI (top-level concepts (Category) only)"},
							"broader": {
								"type": "array",
								"items": {
									"allOf":[{"$ref": "#/components/schemas/EndpointRef"}],
									"xml": {"name":"broader"}
								}, 
								"description": "Direct parent concept (active concept only)",
								"xml": {"name":"broaders","wrapped":true}
							},
							"narrower": {
								"type": "array",
								"items": {
									"allOf":[{"$ref": "#/components/schemas/EndpointRef"}],
									"xml": {"name":"narrower"}
								},
								"description": "Direct children concepts (active concept only)",
								"xml": {"name":"narrowers","wrapped":true}
							},
							"definition": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"uri": {"type": "string", "format": "uri", "description": "Definition URI"},
										"literalForm": {"$ref": "#/components/schemas/Literal"},
										"citation": {
											"type": "array",
											"items": {"allOf":[{"$ref": "#/components/schemas/EndpointRef"}],"xml": {"name":"citation"}},
											"description": "Sources of definition",
											"xml": {"name":"citations","wrapped":true}
										}
									},
									"xml": {"name":"definition"}
								},
								"description": "Definition of concept (active concept only)",
								"xml": {"name":"definitions","wrapped":true}
							},
							"scopeNote": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
									"xml": {"name":"scopeNote"}
								},
								"description": "Scope note of concept (active concept only)",
								"xml": {"name":"scopeNotes","wrapped":true}
							},
							"exactMatch": {
								"type": "array",
								"items": {"type": "string", "format": "uri", "xml": {"name":"exactMatch"}},
								"description": "External exact matches URI (active concept only)",
								"xml": {"name":"exactMatches","wrapped":true}
							},
							"closeMatch": {
								"type": "array",
								"items": {"type": "string", "format": "uri", "xml": {"name":"closeMatch"}},
								"description": "External close matches URI (active concept only)",
								"xml": {"name":"closeMatches","wrapped":true}
							},
							"citation": {
								"type": "array",
								"items": {"allOf":[{"$ref": "#/components/schemas/EndpointRef"}],"xml": {"name":"citation"}}, 
								"description": "Concept's bibliographic references (active concept only)",
								"xml": {"name":"citations","wrapped":true}
							},
							"changeNote": {
								"type": "array",
								"items": {"allOf":[{"$ref": "#/components/schemas/EndpointRef"}],"xml": {"name":"changeNote"}},
								"description": "Concept history (change notes)",
								"xml": {"name":"changeNotes","wrapped":true}
							}
						}
					}
				],
			"xml": {"name": "Concept"}
			},
			"Concepts": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Concept"
				},
				"xml": {"name": "Concepts","wrapped": true}
			},
			"Contributors": {
				"type": "array",
				"items": {
					"allOf": [
						{"$ref": "#/components/schemas/EndpointRef"},
						{
							"type": "object",
							"properties": {
								"uri": {"type": "string", "format": "uri", "description": "Contributor URI"},
								"name": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
										"xml": {"name":"name"}
									},
									"description": "Names of contributor",
									"xml": {"name":"names","wrapped":true}
								},
						        "nick": {
									"type": "array",
									"items": {"type": "string", "xml": {"name": "nick"}},
									"description": "Nicknames (usually acronyms) of contributor",
									"xml": {"name":"nicks","wrapped":true}
								},
						        "resourceType": {"$ref": "#/components/schemas/ResourceTypesArray"}
					        }
				        }
					],
					"xml": {"name":"Contributor"}
				},
				"xml": {"name":"Contributors","wrapped":true}
			},
			"Citations": {
				"type": "array",
				"items": {
					"allOf": [
						{"$ref": "#/components/schemas/EndpointRef"},
						{
							"type": "object",
							"properties": {
								"uri": {"type": "string", "format": "uri", "description": "Bibliographic reference URI"},
								"bibliographicCitation": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
										"xml": {"name":"bibliographicCitation"}
									},
									"description": "Chicago style bibliographies",
									"xml": {"name":"bibliographicCitations","wrapped":true}
								},
						        "url": {"type": "string","format": "uri", "description": "URL of the bibliographic entry in CHIN’s Zotero library"},
						        "source": {"type": "string","format": "uri", "description": "URL of source of the bibliograohic reference"},
						        "resourceType": {"$ref": "#/components/schemas/ResourceTypesArray"}
					        }
				        }
					],
					"xml": {"name":"Citation"}
				},
				"xml": {"name":"Citations","wrapped":true}
			},
			"Revisions": {
				"type": "array",
				"items": {
					"allOf": [
						{"$ref": "#/components/schemas/EndpointRef"},
						{
							"type": "object",
							"properties": {
								"uri": {"type": "string", "format": "uri", "description": "Change event URI"},
								"createdDate": {"allOf":[{"$ref": "#/components/schemas/Date"}],"description": "Creation date of change event"},
								"description": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
										"xml": {"name":"description"}
									},
									"description": "Descriptions of change event",
									"xml": {"name":"descriptions","wrapped":true}
								},
								"label": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {"literalForm": {"$ref": "#/components/schemas/Literal"}},
										"xml": {"name":"label"}
									},
									"description": "Labels of change event",
									"xml": {"name":"labels","wrapped":true}
								},
								"subjectOfChange": {"allOf":[{"$ref": "#/components/schemas/EndpointRef"}], "description": "Concept subjected to the change"},
						        "changeType": {
						        	"type": "string",
						        	"enum": ["create","remove","update","move"],
						        	"description": "Type of change event"
						        },
						        "resourceType": {"$ref": "#/components/schemas/ResourceTypesArray"}
					        }
				        }
					],
					"xml": {"name":"Revision"}
				},
				"xml": {"name":"Revisions","wrapped":true}
			},
			"Search": {
				"type": "array",
				"items": {
					"allOf": [
						{"$ref": "#/components/schemas/Labels"},
						{
							"type": "object",
							"properties": {
								"definition": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"literalForm": {"$ref": "#/components/schemas/Literal"}
										},
										"xml": {"name":"definition"}
									},
									"description": "Definition of concept (active concept only)",
									"xml": {"name":"definitions","wrapped":true}
								},
								"scopeNote": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"literalForm": {"$ref": "#/components/schemas/Literal"}
										},
										"xml": {"name":"scopeNote"}
									},
									"description": "Scope note of concept (active concept only)",
									"xml": {"name":"scopeNotes","wrapped":true}
								}
							}
						}
					],
					"xml": {"name":"Concept"}
				},
				"xml": {"name":"Concepts","wrapped":true}
			},
			"Void": {
				"required": ["self","license","dataDump"],
				"type": "object",
				"properties": {
					"self": {"type": "string", "format": "uri", "description": "URL of resource API endpoint"},
					"uri": {"type": "string", "format": "uri", "description": "Dataset URI"},
					"resourceType": {"$ref": "#/components/schemas/ResourceTypesArray"},
					"created": {"allOf":[{"$ref": "#/components/schemas/Date"}], "description": "Creation date of dataset"},
					"modified": {"allOf": [{"$ref": "#/components/schemas/Date"}], "description": "Last modified date of dataset"},
					"title": {
						"type": "array",
						"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"title"}},
						"description": "Titles of dataset",
						"xml": {"name":"titles","wrapped":true}
					},
					"license": {"type": "string", "format": "uri", "description": "License of dataset"},
					"rights": {
						"type": "array",
						"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"rightStatement"}},
						"description": "Rights of dataset",
						"xml": {"name":"rightStatements","wrapped":true}
					},
					"description": {
						"type": "array",
						"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"description"}},
						"description": "Descriptions of dataset",
						"xml": {"name":"descriptions","wrapped":true}
					},
					"dataDump": {
						"type": "array",
						"items": {"type": "string", "format": "uri", "xml": {"name":"dataDump"}},
						"description": "URLs of data dumps",
						"xml": {"name":"dataDumps","wrapped":true}
					},
					"entities": {"type": "integer", "description": "Number of active concepts"},
					"triples": {"type": "integer", "description": "Number of triples"},
					"rightsHolder": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"uri": {"type": "string", "format": "uri", "description": "Rights holder URI"},
								"name": {
									"type": "array",
									"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"name"}},
									"description": "Names of rights holder",
									"xml": {"name":"names","wrapped":true}
								}
							},
							"xml": {"name":"rightsHolder"}
						},
						"description": "Rights holders of dataset",
						"xml": {"name":"rightsHolders","wrapped":true}			
					},
					"creator": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"uri": {"type": "string", "format": "uri", "description": "Creator URI"},
								"name": {
									"type": "array",
									"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"name"}},
									"description": "Names of creator",
									"xml": {"name":"names","wrapped":true}
								}
							},
							"xml": {"name":"creator"}
						},
						"description": "Creators of dataset",
						"xml": {"name":"creators","wrapped":true}								
					},
					"contributor": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"uri": {"type": "string", "format": "uri", "description": "Contributor URI"},
								"name": {
									"type": "array",
									"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"name"}},
									"description": "Names of contributors",
									"xml": {"name":"names","wrapped":true}
								}
							},
							"xml": {"name":"contributor"}
						},
						"description": "Contributors of dataset",
						"xml": {"name":"contributors","wrapped":true}								
					},
					"publisher": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"uri": {"type": "string", "format": "uri", "description": "Publisher URI"},
								"name": {
									"type": "array",
									"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"name"}},
									"description": "Names of publishers",
									"xml": {"name":"names","wrapped":true}
								}
							},
							"xml": {"name":"publisher"}
						},
						"description": "Publishers of dataset",
						"xml": {"name":"publishers","wrapped":true}					
					},
					"classPartition": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"entities": {"type": "integer", "description": "Number of entities as instance of class"},
								"class": {"type": "string", "format": "uri", "description": "Class URI"}
							},
							"xml": {"name":"classPartition"}
						},
						"description": "Count of instances of selected classes (concepts, labels, images, concept scheme)",
						"xml": {"name":"classPartitions","wrapped":true}				
					},
					"languagePartition": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"triples": {"type": "integer", "description": "Number of terms by language"},
								"language": {"type": "string", "description": "Language tag"}
							},
							"xml": {"name":"languagePartition"}
						},
						"description": "Count of terms by languages",
						"xml": {"name":"languagePartitions","wrapped":true}			
					},
					"propertyPartition": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"triples": {"type": "integer", "description": "Number of deprecated concepts"},
								"property": {"type": "string", "format": "uri", "description": "Property URI indicating deprecation"}
							},
							"xml": {"name":"propertyPartition"}
						},
						"description": "Count of deprecated concepts",
						"xml": {"name":"propertyPartitions","wrapped":true}
					},
					"subset": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"triples": {"type": "integer", "description": "Number of matches"},
								"linkPredicate": {"type": "string", "format": "uri", "description": "Property URI indicating type of match"},
								"target": {
									"type": "object",
									"properties": {
										"name": {
											"type": "array",
											"items": {"allOf":[{"$ref": "#/components/schemas/Literal"}],"xml": {"name":"name"}},
											"description": "Names of matched external dataset",
											"xml": {"name":"names","wrapped":true}
									}}
								}
							},
							"xml": {"name":"subset"}
						},
						"description": "Count of co-references per domain (external datasets)",
						"xml": {"name":"subsets","wrapped":true}
					}
		        },
				"xml": {"name":"VoidDataset"}
			}
		},
		"examples": {}
	}
}